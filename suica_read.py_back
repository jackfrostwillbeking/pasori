#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
#import csv
#import binascii
import os
#import struct
import sys
import pygame.mixer
import time

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/nfcpy')

import nfc

#num_blocks = 20
#service_code = 0x090f
 
#class StationRecord(object):
#  db = None
# 
#  def __init__(self, row):
#    self.area_key = int(row[0], 10)
#    self.line_key = int(row[1], 10)
#    self.station_key = int(row[2], 10)
#    self.company_value = row[3]
#    self.line_value = row[4]
#    self.station_value = row[5]
# 
#  @classmethod
#  def get_none(cls):
#    # 駅データが見つからないときに使う
#    return cls(["0", "0", "0", "None", "None", "None"])
#  @classmethod
#  def get_db(cls, filename):
#    # 駅データのcsvを読み込んでキャッシュする
#    if cls.db == None:
#      cls.db = []
#      for row in csv.reader(open(filename, 'rU'), delimiter=',', dialect=csv.excel_tab):
#        cls.db.append(cls(row))
#    return cls.db
#  @classmethod
#  def get_station(cls, line_key, station_key):
#    # 線区コードと駅コードに対応するStationRecordを検索する
#    for station in cls.get_db("StationCode.csv"):
#      if station.line_key == line_key and station.station_key == station_key:
#        return station
#    return cls.get_none()
# 
#class HistoryRecord(object):
#  def __init__(self, data):
#    # ビッグエンディアンでバイト列を解釈する
#    row_be = struct.unpack('>2B2H4BH4B', data)
#    # リトルエンディアンでバイト列を解釈する
#    row_le = struct.unpack('<2B2H4BH4B', data)
# 
#    self.db = None
#    self.console = self.get_console(row_be[0])
#    self.process = self.get_process(row_be[1])
#    self.year = self.get_year(row_be[3])
#    self.month = self.get_month(row_be[3])
#    self.day = self.get_day(row_be[3])
#    self.balance = row_le[8]
# 
#    self.in_station = StationRecord.get_station(row_be[4], row_be[5])
#    self.out_station = StationRecord.get_station(row_be[6], row_be[7])
# 
#  @classmethod
#  def get_console(cls, key):
#    # よく使われそうなもののみ対応
#    return {
#      0x03: "精算機",
#      0x04: "携帯型端末",
#      0x05: "車載端末",
#      0x12: "券売機",
#      0x16: "改札機",
#      0x1c: "乗継精算機",
#      0xc8: "自販機",
#    }.get(key)
#  @classmethod
#  def get_process(cls, key):
#    # よく使われそうなもののみ対応
#    return {
#      0x01: "運賃支払",
#      0x02: "チャージ",
#      0x0f: "バス",
#      0x46: "物販",
#    }.get(key)
#  @classmethod
#  def get_year(cls, date):
#    return (date >> 9) & 0x7f
#  @classmethod
#  def get_month(cls, date):
#    return (date >> 5) & 0x0f
#  @classmethod
#  def get_day(cls, date):
#    return (date >> 0) & 0x1f
# 
def connected(tag):
  #tag_data = tag;
  #data_list=tag_data.split(" ")
  #print data_list
  start = 0x10000
  n = 32
  services = [nfc.tag.tt3.ServiceCode(i >> 6, i & 0x3f)
                          for i in xrange(start, start+n)]
  print services[1]
  sc1 = nfc.tag.tt3.ServiceCode(16, 0x09)
  sc2 = nfc.tag.tt3.ServiceCode(80, 0x0B)
  bc1 = nfc.tag.tt3.BlockCode(5, service=0)
  bc2 = nfc.tag.tt3.BlockCode(0, service=1)
  bc3 = nfc.tag.tt3.BlockCode(1, service=1)
  print type(tag)
  print sc1
  print sc2
  print bc1
  print bc2
  print bc3
#  if isinstance(tag, nfc.tag.tt3.type3tag):
#    try:
#      sc = nfc.tag.tt3.servicecode(service_code >> 6 ,service_code & 0x3f)
#      for i in range(num_blocks):
#        bc = nfc.tag.tt3.blockcode(i,service=0)
#        data = tag.read_without_encryption([sc],[bc])
#        history = historyrecord(bytes(data))
#        print "=== %02d ===" % i
#        print "端末種: %s" % history.console
#        print "処理: %s" % history.process
#        print "日付: %02d-%02d-%02d" % (history.year, history.month, history.day)
#        print "入線区: %s-%s" % (history.in_station.company_value, history.in_station.line_value)
#        print "入駅順: %s" % history.in_station.station_value
#        print "出線区: %s-%s" % (history.out_station.company_value, history.out_station.line_value)
#        print "出駅順: %s" % history.out_station.station_value
#        print "残高: %d" % history.balance
#        print "bin: " 
#        print "" . join(['%02x ' % s for s in data])
#    except exception as e:
#      print "error: %s" % e
#  else:
#    print "error: tag isn't type3tag"
# 
if __name__ == "__main__":
  path = '/home/pi/nfcpy-suica-sample/hogehoge.txt'
  muon_sound = '/home/pi/nfcpy-suica-sample/muon_01sec.wav'
  fail_sound = '/home/pi/nfcpy-suica-sample/nc43688.wav'
  #coin_sound = '/home/pi/nfcpy-suica-sample/nc23750.wav'
  coin_sound = '/home/pi/nfcpy-suica-sample/nc106374.wav'
  #coin_sound = '/home/pi/nfcpy-suica-sample/coin05.mp3'
  with open(path) as f:
    print(type(f))
    l = f.readlines()
    print(type(l))
    print(l)
    pygame.mixer.init()
    coin=pygame.mixer.Sound(coin_sound)
    muon=pygame.mixer.Sound(muon_sound)
    fail=pygame.mixer.Sound(fail_sound)
    clf = nfc.ContactlessFrontend('usb')
    if clf.connect(rdwr={'on-connect': connected}):
      pygame.mixer.Sound.play(muon)
      time.sleep(2)
      pygame.mixer.Sound.play(coin)
      time.sleep(3)
      pygame.mixer.Sound.play(fail)
      time.sleep(3)
